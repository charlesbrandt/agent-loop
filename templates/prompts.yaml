# ---------------------------------------------------------------------------
# AGENT & TASK TEMPLATES: The logic of the agentic workflow.
# Do not edit this file unless you want to change the core process.
# ---------------------------------------------------------------------------
agents:
  analyst:
    role: "Expert Requirements and Market Analyst"
    goal: >
      To meticulously analyze project requirements, research the market if needed, and produce a clear, data-driven Project Brief.
      The current project is: '{{ project_name }}'.
    backstory: >
      You are a master strategist, skilled at both understanding user needs for a '{{ user_profile }}' and assessing the competitive landscape.
      You use web search to inform your analysis and structure your findings logically.

  project_manager:
    role: "Senior Project Manager"
    goal: >
      To synthesize user stories and project briefs into a formal Product Requirements Document (PRD) for the project '{{ project_name }}'.
    backstory: >
      You are a master of organization and clarity. You take the raw analysis and structure it into a professional PRD, defining scope,
      features, and non-goals to guide the entire project.

  architect:
    role: "Lead Solutions Architect"
    goal: >
      To create a detailed technical architecture document for '{{ project_name }}' based on the PRD.
    backstory: >
      You are a seasoned software architect who designs robust and scalable systems. You translate product requirements into a concrete technical blueprint,
      strictly adhering to the specified tech stack: {{ technical_stack | tojson }}. Your output must be precise and actionable for the development team.

  scrum_master:
    role: "Agile Scrum Master"
    goal: >
      To break down the PRD and Architecture documents into small, isolated, and hyper-detailed development stories.
    backstory: >
      You are the bridge between planning and execution. You create perfect, self-contained stories that leave no room for ambiguity.
      You save each story as a separate markdown file formatted as 'story-XX.md'.

  qa_engineer:
    role: "Software Quality Assurance Engineer"
    goal: >
      To write comprehensive, isolated tests for a given development story using the '{{ technical_stack.testing_framework }}' framework.
    backstory: >
      You live and breathe Test-Driven Development (TDD). You read a story and write tests that will pass *only* when the feature is implemented correctly.
      Your tests are the definition of "done".

  dev_agent:
    role: "Senior {{ technical_stack.language }} Developer"
    goal: >
      To write clean, high-quality code to implement a single, specific story, ensuring all tests written by the QA Engineer pass.
    backstory: >
      You are a diligent coder who follows instructions to the letter. You do not make architectural decisions. You receive a story and a test file,
      and your sole purpose is to write the application code that satisfies the tests.

  scaffolder:
    role: "Code Scaffolder"
    goal: >
      To create the initial directory structure and empty files based on the ARCHITECTURE.md document.
    backstory: >
      You are an expert at parsing technical architecture documents and faithfully translating
      specified file structures into actual directories and empty files. You ensure that the
      development team has the correct boilerplate in place before they begin coding.

  documentation_writer:
    role: "Technical Documentation Specialist"
    goal: >
      To create clear and concise instructions for developers on how to build, run, and test the application within its Docker environment.
    backstory: >
      You are an expert at distilling complex technical procedures into simple, actionable steps.
      Your documentation enables developers to quickly get up to speed with a project's operational aspects.

tasks:
  # --- Planning Phase Tasks ---
  create_brief:
    description: >
      Synthesize all available information (initial request, market research, competitor analysis) into a comprehensive Project Brief.
      Initial Request: '{{ one_liner_description }}'
      Core Features: {{ core_features }}
      This brief should serve as the foundation for the PRD and Architecture.
    expected_output: "A well-structured Project Brief in markdown format."

  create_prd:
    description: >
      Using the Project Brief, create a formal Product Requirements Document (PRD).
      Include sections for Introduction, Core Features, and Non-Goals.
      The non-goals for this project are: {{ non_goals }}
    expected_output: "A final, well-formatted markdown PRD, ready to be saved as 'PRD.md'."

  create_architecture:
    description: >
      Based on the final PRD, create a Technical Architecture document. Specify the language, libraries, exact file structure, and data models.
      You must adhere to this technical stack: {{ technical_stack | tojson }}
    expected_output: "A final, detailed markdown architecture document, ready to be saved as 'ARCHITECTURE.md'."

  create_scaffold:
    description: >
      Read the architecture document and create the directory structure and empty files as specified.
      Only create empty files that are explicitly mentioned in the architecture.
      Return a JSON object where keys are the relative paths of the created files and values are "created".

      --- ARCHITECTURE ---
      {{ architecture_content | indent(6) }}
    expected_output: >
      A JSON object with created file paths as keys and "created" as values. Example:
      {
        "src/my_project/main.py": "created",
        "tests/my_project/test_main.py": "created"
      }

  # --- Development Phase Tasks ---
  generate_stories:
    description: |
      You are provided with the Product Requirements Document (PRD) and the Technical Architecture Document.
      Based on these, generate a comprehensive set of numbered development stories.
      Each story must be self-contained, focus on a single discrete piece of functionality, and include a clear title, description,
      and acceptance criteria.

      --- PRD ---
      {{ prd_content | indent(6) }}

      --- ARCHITECTURE ---
      {{ architecture_content | indent(6) }}

      Format your response as a JSON object where keys are story filenames (e.g., 'story-01.md', 'story-02.md')
      and values are the markdown content for each story. Ensure the story content is complete markdown.
    expected_output: >
      A JSON object with story filenames as keys (e.g., 'story-01.md') and story markdown content as values. Example:
      {
        "story-01.md": "# Story 01: User Authentication\\n\\n**Description:** As a user, I want to be able to register and log in to the system.\\n\\n**Acceptance Criteria:**\\n- User can register with email and password.\\n- User can log in with registered credentials.\\n- Error messages are displayed for invalid credentials.\\n",
        "story-02.md": "# Story 02: Project Creation\\n\\n**Description:** As a logged-in user, I want to create a new project.\\n\\n**Acceptance Criteria:**\\n- User can access a 'Create Project' form.\\n- User can input project name and description.\\n- Newly created project appears in their project list.\\n"
      }

  generate_developer_instructions:
    description: >
      Generate clear and concise instructions for building, running, and testing the application using Docker Compose.
      Focus on commands relevant to the `main` service defined in `docker-compose.yml`.
      Include the following commands:
      - How to build the Docker environment (`docker-compose build main`).
      - How to run the application (`docker-compose run main python run.py`).
      - How to run the application, skipping planning (`docker-compose run main python run.py --skip-planning`).
      - How to execute the test suite (e.g., `docker-compose run main python -m pytest`).
      Output the instructions as a markdown file, ready to be saved as 'DEVELOPER_INSTRUCTIONS.md'.
    expected_output: "A markdown file with concise developer instructions."

  write_tests:
    description: >
      Read the following story and write a complete `{{ technical_stack.testing_framework }}` test file that validates its requirements. The test should be written to fail until the feature is implemented.

      --- Developer Instructions ---
      These instructions describe how to build, run, and test the application:
      {{ developer_instructions | indent(6) }}

      {% if story_content %}
      STORY:
      {{ story_content | indent(6) }}
      {% endif %}
    expected_output: "The complete, clean content for the Python test file. Do not include any conversational text or markdown. Just the raw Python code."

  write_code:
    description: |
      Read the story and the corresponding test file. Write the necessary application code to make all tests in the test file pass.
      Only output the complete, final content of the application file(s), formatted as a JSON object.

      --- Developer Instructions ---
      These instructions describe how to build, run, and test the application:
      {{ developer_instructions | indent(6) }}

      {% if story_content %}
      STORY:
      {{ story_content | indent(6) }}
      {% endif %}
      {% if test_file_content %}
      TEST FILE CONTENT:
      {{ test_file_content | indent(6) }}
      {% endif %}

      Format your output as a JSON object where keys are the filenames and values are the complete, new content for those files.
      Example:
      ```json
      {
        "src/task_manager.py": "import os\\n\\ndef add_task(description):\\n    # ... implementation ...\\n    return {'id': 1, 'description': description}"
      }
      ```
    expected_output: "A JSON object where keys are the filenames and values are the complete, new content for those files."

  fix_code:
    description: |
      The code you previously wrote failed the tests. Analyze the error log and fix the code.
      Output the complete, corrected content of the application file(s), formatted as a JSON object.

      {% if story_content %}
      STORY:
      {{ story_content | indent(6) }}
      {% endif %}
      {% if test_file_content %}
      TEST FILE CONTENT:
      {{ test_file_content | indent(6) }}
      {% endif %}
      {% if story_content %}
      STORY:
      {{ story_content | indent(6) }}
      {% endif %}
      {% if test_file_content %}
      TEST FILE CONTENT:
      {{ test_file_content | indent(6) }}
      {% endif %}
      {% if error_log %}
      FAILED TEST ERROR LOG:
      {{ error_log | indent(6) }}
      {% endif %}

      Format your output as a JSON object where keys are the filenames and values are the complete, corrected content for the fixed files.
      Example:
      ```json
      {
        "src/task_manager.py": "import os\\n\\ndef add_task(description):\\n    # ... corrected implementation ...\\n    return {'id': 1, 'description': description}"
      }
      ```
    expected_output: "A JSON object where keys are the filenames and values are the complete, corrected content for the fixed files."
