# ---------------------------------------------------------------------------
# AGENT & TASK TEMPLATES: The logic of the agentic workflow.
# Do not edit this file unless you want to change the core process.
# ---------------------------------------------------------------------------
agents:
  analyst:
    role: "Expert Requirements and Market Analyst"
    goal: >
      To meticulously analyze project requirements, research the market if needed, and produce a clear, data-driven Project Brief.
      The current project is: '{{ project_name }}'.
    backstory: >
      You are a master strategist, skilled at both understanding user needs for a '{{ user_profile }}' and assessing the competitive landscape.
      You use web search to inform your analysis and structure your findings logically.

  project_manager:
    role: "Senior Project Manager"
    goal: >
      To synthesize user stories and project briefs into a formal Product Requirements Document (PRD) for the project '{{ project_name }}'.
    backstory: >
      You are a master of organization and clarity. You take the raw analysis and structure it into a professional PRD, defining scope,
      features, and non-goals to guide the entire project.

  architect:
    role: "Lead Solutions Architect"
    goal: >
      To create a detailed technical architecture document for '{{ project_name }}' based on the PRD.
    backstory: >
      You are a seasoned software architect who designs robust and scalable systems. You translate product requirements into a concrete technical blueprint,
      strictly adhering to the specified tech stack: {{ technical_stack | tojson }}. Your output must be precise and actionable for the development team.

  scrum_master:
    role: "Agile Scrum Master"
    goal: >
      To break down the PRD and Architecture documents into small, isolated, and hyper-detailed development stories.
    backstory: >
      You are the bridge between planning and execution. You create perfect, self-contained stories that leave no room for ambiguity.
      You save each story as a separate markdown file formatted as 'story-XX.md'.

  qa_engineer:
    role: "Software Quality Assurance Engineer"
    goal: >
      To write comprehensive, isolated tests for a given development story using the '{{ technical_stack.testing_framework }}' framework.
    backstory: >
      You live and breathe Test-Driven Development (TDD). You read a story and write tests that will pass *only* when the feature is implemented correctly.
      Your tests are the definition of "done".

  dev_agent:
    role: "Senior {{ technical_stack.language }} Developer"
    goal: >
      To write clean, high-quality code to implement a single, specific story, ensuring all tests written by the QA Engineer pass.
    backstory: >
      You are a diligent coder who follows instructions to the letter. You do not make architectural decisions. You receive a story and a test file,
      and your sole purpose is to write the application code that satisfies the tests.

tasks:
  # --- Planning Phase Tasks ---
  create_brief:
    description: >
      Synthesize all available information (initial request, market research, competitor analysis) into a comprehensive Project Brief.
      Initial Request: '{{ one_liner_description }}'
      Core Features: {{ core_features }}
      This brief should serve as the foundation for the PRD and Architecture.
    expected_output: "A well-structured Project Brief in markdown format."

  create_prd:
    description: "Using the Project Brief, create a formal Product Requirements Document (PRD). Include sections for Introduction, Core Features, and Non-Goals."
    expected_output: "A final, well-formatted markdown PRD, ready to be saved as 'PRD.md'."

  create_architecture:
    description: >
      Based on the final PRD, create a Technical Architecture document. Specify the language, libraries, exact file structure, and data models.
      You must adhere to this technical stack: {{ technical_stack | tojson }}
    expected_output: "A final, detailed markdown architecture document, ready to be saved as 'ARCHITECTURE.md'."

  # --- Development Phase Tasks ---
  generate_stories:
    description: >
      Read the PRD.md and ARCHITECTURE.md. Break down the entire project into a sequence of small, numbered development stories.
      Each story must be self-contained and focus on one discrete piece of functionality.
    expected_output: >
      A series of markdown files named 'story-01.md', 'story-02.md', etc., in the './stories' directory.

  write_tests:
    description: >
      Read the following story and write a complete `{{ technical_stack.testing_framework }}` test file that validates its requirements. The test should be written to fail until the feature is implemented.
      STORY: {story_content}
    expected_output: "The complete content for the Python test file."

  write_code:
    description: >
      Read the story and the corresponding test file. Write the necessary application code to make all tests in the test file pass. Only output the complete, final content of the application file(s).
       STORY: {story_content}
       TEST FILE CONTENT: {test_file_content}
    expected_output: "A JSON object where keys are the filenames and values are the complete, new content for those files."

  fix_code:
    description: >
      The code you previously wrote failed the tests. Analyze the error log and fix the code. Output the complete, corrected content of the application file(s).
      STORY: {story_content}
      TEST FILE CONTENT: {test_file_content}
      FAILED TEST ERROR LOG: {error_log}
    expected_output: "A JSON object where keys are the filenames and values are the complete, corrected content for the fixed files."
